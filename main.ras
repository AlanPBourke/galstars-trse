program C64Project;
var
	
	RasterCount : integer;
	Tempwork : pointer of integer;
	
	const Star1Shape : byte = %00000011;
	const Star2Shape : byte = %00001100; 
	const Star3Shape : byte = %00110000;
	const Star4Shape : byte = %11000000;
	
	//const Border : address = $D020;
	//const Backgr : address = $D021;
	
	const RasterLine : address = $D012;
	const CharSetLoc : address = $3000;
	
	const Star1Init  : address = $31D0;	// Init address for each star, CHAR_RAM plus offset
	
   const Star1Limit : address = $3298;	// Limit for each star
	const Star1Reset : address = $31D0;	// Reset address for each star

	const Star2Init : address = $3298;
	const Star2Limit : address = $3360; 	// Once limit is reached, they are reset
	const Star2Reset : address = $3298;

	const Star3Init : address = $3240;
	const Star3Limit : address = $3298;
	const Star3Reset : address = $31D0;

	const Star4Init : address = $32E0;
	const Star4Limit : address = $3360;
	const Star4Reset : address = $3298;

	const StaticStar1 : address = $3250; // 2 Locations for blinking static stars
	const StaticStar2 : address = $31E0;
	
	StarfieldPtr : pointer;
	StarfieldPtr2 : integer;
	StarfieldPtr3 : integer;
	StarfieldPtr4 : integer;

	StarfieldRow : array[40] of byte = (058,092,073,064,091,062,093,081,066,094,086,059,079,087,080,071,076,067,082,095,100,078,099,060,075,063,084,065,083,096,068,088,074,061,090,098,085,101,097,077);
	StarfieldColours : array[20] of byte = (14,10,12,15,14,13,12,11,10,14,14,10,14,15,14,13,12,11,10,12);
	
	 //charset: IncBin("resources/charset.bin", CharSetLoc);
 
	
procedure CreateStarScreen();
	var
		currentchar : byte;
		colourindex : byte;
		//offset : integer;
		col : byte;
		row : byte;
    	saddr : array[25] of integer;
    	caddr : array[25] of integer;		
begin
	
	//ScreenOff();	
	CreateAddressTable( #saddr, $0400, 40, 25 );   // $0400 screen address, 40 characters per column, 25 rows
    CreateAddressTable( #caddr, $D800, 40, 25 );   // $D800 color address, 40 characters per column, 25 rows
	//https://retrocomputing.stackexchange.com/questions/7528/commodore-8-bit-character-sets/8278
	col := 0;
	while col <= 39 do begin
		
		currentchar := StarfieldRow[col];
		
		row := 0;
		
		while row <= 24 do begin
			
			screenmemory := AddressTable( #saddr, col, row );
			screenmemory[0] := currentchar;
			
			inc(currentchar);
			
			// 83 = heart, 58 = colon
			if currentchar = 107 then begin
				currentchar := 83;
				//currentchar := 0;
			end
			else
			if currentchar = 83 then begin
				currentchar := 58;
			end;
			
			colormemory := AddressTable( #caddr, col, row );
			colormemory[0] := StarfieldColours[colourindex];
	
			inc(row);
			
		end;
		
		inc(colourindex);
		
		if colourindex > 19 then begin
			colourindex := 0;
		end;
		
		inc(col);
		
	end;
	
	//ScreenOn();

end;

Procedure DoStarfield();
	//var Tempwork : pointer;		
begin

	StarfieldPtr[0] := 0;
	//if RasterCount & 1 then begin
		Inc(StarfieldPtr);
		StarfieldPtr[0] := StarfieldPtr[0] | Star1Shape;
		
		if StarfieldPtr = Star1Limit then begin

			StarfieldPtr := Star1Reset;
		end;
	//end;
	
end;

interrupt MainRaster();
begin

	StartIRQ(0);
	Inc(StarfieldPtr);
	inc(RasterCount);
   DoStarfield();

	CloseIRQ();
end;

begin
	
	 SetMemoryConfig(1, 0, 0);	//	IO area visible at $D000-$DFFF, RAM visible at $A000-$BFFF (NO BASIC) and RAM visible at $E000-$FFFF (NO KERNAL). This is the typical memory configuration for demo/game development. 
	 DisableCIAInterrupts();
    SCREEN_BG_COL:=BLACK;
    SCREEN_FG_COL:=BLACK;
    
    DefineScreen();
   SetCharsetLocation(CharSetLoc);

 	 CopyCharsetFromRom(CharSetLoc);
 // todo clear chars
	 CreateStarScreen();
	 //screenmemory := $0400;
	//screenmemory[0] := 0;
	//StarfieldPtr := $3000;
	//StarfieldPtr[0] := 255;
	//poke(^$3000,0,255);    
	StarfieldPtr := Star1Init;
	StartRasterChain(MainRaster(), $220, 0);

	Loop(); 
	
end.

